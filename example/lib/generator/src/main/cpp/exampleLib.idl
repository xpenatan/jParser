interface ParentClass {
    float addFloatValue(float a, float b);
    boolean invertBoolean(boolean value);
};

interface NormalClass {
    attribute long hiddenInt;
    [Value] attribute ReturnClass valueReturnClass;
    attribute ReturnClass pointerReturnClass;
    attribute ReturnClass nullPointerReturnClass;

    static attribute long hiddenInt_static;
    [Value] static attribute ReturnClass valueReturnClass_static;
    static attribute ReturnClass pointerReturnClass_static;
    static attribute ReturnClass nullPointerReturnClass_static;

    void NormalClass();
    void NormalClass(long c, [Ref]ParamData refParamClass);

    long getVersion();
// Emscripten don't allow param by value
//    void NormalClass(ParamData pointerParamData, [Ref]ParamData refParamData, [Value]ParamData valueParamData);

//    void setString(DOMString text);
//    static DOMString addString(DOMString text);
//    [Value] static ReturnClass getStaticReturnValueClass(ParamData paramData);
    [Value]ReturnClass getReturnValueClass(ParamData paramData);

    static long subIntValue(long a, long b, optional long subValue);
    long addIntValue(long a, long b);
    [Ref]ReturnClass getReturnRefClass();
    [Value]ReturnClass getReturnValueObject();
//    ReturnClass getReturnPointerClass();
//    ReturnClass getReturnNullPointerClass();
    void refParam([Ref]ParamData refParamOne, [Ref]ParamData refParamTwo, [Ref]ParamData refParamThree);
//    void pointerParam(ParamData paramData);

    // Emscripten don't allow param by value
//    void valueParam([Value]ParamData paramData);

//    void addIntArrayItems(long [] array);

    void callInterface([Ref]InterfaceClass obj);

    long enumParam(EnumLib value);

    void enumVoidParam(EnumLib value);

    EnumLib enumReturn(long value);

    boolean printText(long dummyParam, [Const]DOMString text);

    void setArray(float[] array);
};
NormalClass implements ParentClass;

interface ReturnClass {
    void ReturnClass();

    attribute float value;

    [Operator="=", Ref] ReturnClass copy([Ref]ReturnClass value);
};

interface OperatorClass {
    void OperatorClass();

    attribute float value;

    [Operator="=", Ref] OperatorClass copy([Ref]OperatorClass value);
};

interface ParamData {
    void ParamData();
    attribute long intData;
    attribute float floatData;
};

interface InterfaceClass {
    void onParamCall([Ref]ParamData data);
};

[JSImplementation="InterfaceClass"]
interface InterfaceClassImpl {
    void InterfaceClassImpl();
    [Const] void onParamCall([Ref]ParamData data);
};

interface DefaultInterface {
    void DefaultInterface();
};
DefaultInterface implements InterfaceClass;

enum EnumLib {
    "FIRST",
    "SECOND"
};

enum EnumTwoLib {
    "EnumTwoLib_THIRD",
    "EnumTwoLib_FOURTH"
};

enum EnumWithinClass {
  "NormalClass::e_val"
};

enum EnumInNamespace {
// [-NAMESPACE]
    "EnumNamespace::e_namespace_val"
};