/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.jparser.example.lib;

import com.github.xpenatan.jparser.example.lib.subpackage.ParamData;
import com.github.xpenatan.jparser.example.lib.idl.helper.IDLFloatArray;
import com.github.xpenatan.jparser.example.lib.idl.helper.IDLString;

public class NormalClass extends ParentClass {

    static public final NormalClass T_01 = new NormalClass((byte) 1, (char) 1);

    static public final NormalClass T_02 = new NormalClass((byte) 1, (char) 1);

    static public final NormalClass T_03 = new NormalClass((byte) 1, (char) 1);

    private ReturnClass ReturnClass_TEMP_GEN_0;

    private ReturnClass ReturnClass_TEMP_GEN_1;

    private ReturnClass ReturnClass_TEMP_GEN_2;

    private IDLString IDLString_TEMP_GEN_0;

    private IDLString IDLString_TEMP_GEN_1;

    private ReturnClass ReturnClass_TEMP_GEN_3;

    private ReturnClass ReturnClass_TEMP_GEN_4;

    private ReturnClass ReturnClass_TEMP_GEN_5;

    static private ReturnClass ReturnClass_TEMP_STATIC_GEN_0;

    static private ReturnClass ReturnClass_TEMP_STATIC_GEN_1;

    static private ReturnClass ReturnClass_TEMP_STATIC_GEN_2;

    public NormalClass() {
        super((byte) 1, (char) 1);
        long addr = createNATIVE();
        initNative(addr, true);
    }

    /*[-C++;-NATIVE]
return (jlong)new NormalClass();
*/
    private static native long createNATIVE();

    public NormalClass(int c, ParamData refParamClass) {
        super((byte) 1, (char) 1);
        long addr = createNATIVE(c, (refParamClass != null ? refParamClass.getCPointer() : 0));
        initNative(addr, true);
    }

    /*[-C++;-NATIVE]
return (jlong)new NormalClass(c, *((ParamData* )refParamClass_addr));
*/
    private static native long createNATIVE(int c, long refParamClass_addr);

    public NormalClass(int nameSpaceEnum) {
        super((byte) 1, (char) 1);
        long addr = createNATIVE(nameSpaceEnum);
        initNative(addr, true);
    }

    /*[-C++;-NATIVE]
return (jlong)new NormalClass((EnumNamespace::EnumInNamespace)nameSpaceEnum);
*/
    private static native long createNATIVE(int nameSpaceEnum);

    public NormalClass(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public int getVersion() {
        return getVersionNATIVE(getCPointer());
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return nativeObject->getVersion();
*/
    private static native int getVersionNATIVE(long this_addr);

    public ReturnClass getReturnValueClass(ParamData paramData) {
        long pointer = getReturnValueClassNATIVE(getCPointer(), (paramData != null ? paramData.getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_0 == null)
            ReturnClass_TEMP_GEN_0 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_0.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_0;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
static ReturnClass copy_addr;
copy_addr = nativeObject->getReturnValueClass((ParamData* )paramData_addr);
return (jlong)&copy_addr;*/
    private static native long getReturnValueClassNATIVE(long this_addr, long paramData_addr);

    public static int subIntValue(int a, int b, int subValue) {
        return subIntValueNATIVE(a, b, subValue);
    }

    /*[-C++;-NATIVE]
return NormalClass::subIntValue(a, b, subValue);
*/
    private static native int subIntValueNATIVE(int a, int b, int subValue);

    public static int subIntValue(int a, int b) {
        return subIntValueNATIVE(a, b);
    }

    /*[-C++;-NATIVE]
return NormalClass::subIntValue(a, b);
*/
    private static native int subIntValueNATIVE(int a, int b);

    public int addIntValue(int a, int b) {
        return addIntValueNATIVE(getCPointer(), a, b);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return nativeObject->addIntValue(a, b);
*/
    private static native int addIntValueNATIVE(long this_addr, int a, int b);

    public ReturnClass getReturnRefClass() {
        long pointer = getReturnRefClassNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_1 == null)
            ReturnClass_TEMP_GEN_1 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_1.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_1;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)&nativeObject->getReturnRefClass();
*/
    private static native long getReturnRefClassNATIVE(long this_addr);

    public ReturnClass getReturnValueObject() {
        long pointer = getReturnValueObjectNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_2 == null)
            ReturnClass_TEMP_GEN_2 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_2.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_2;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
static ReturnClass copy_addr;
copy_addr = nativeObject->getReturnValueObject();
return (jlong)&copy_addr;*/
    private static native long getReturnValueObjectNATIVE(long this_addr);

    public void refParam(ParamData refParamOne, ParamData refParamTwo, ParamData refParamThree) {
        refParamNATIVE(getCPointer(), (refParamOne != null ? refParamOne.getCPointer() : 0), (refParamTwo != null ? refParamTwo.getCPointer() : 0), (refParamThree != null ? refParamThree.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->refParam(*((ParamData* )refParamOne_addr), *((ParamData* )refParamTwo_addr), *((ParamData* )refParamThree_addr));
*/
    private static native void refParamNATIVE(long this_addr, long refParamOne_addr, long refParamTwo_addr, long refParamThree_addr);

    public void callInterface(InterfaceClass obj) {
        callInterfaceNATIVE(getCPointer(), (obj != null ? obj.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->callInterface(*((InterfaceClass* )obj_addr));
*/
    private static native void callInterfaceNATIVE(long this_addr, long obj_addr);

    public int enumParam(int value) {
        return enumParamNATIVE(getCPointer(), value);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return nativeObject->enumParam((::EnumLib)value);
*/
    private static native int enumParamNATIVE(long this_addr, int value);

    public void enumVoidParam(int value) {
        enumVoidParamNATIVE(getCPointer(), value);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->enumVoidParam((::EnumLib)value);
*/
    private static native void enumVoidParamNATIVE(long this_addr, int value);

    public int enumReturn(int value) {
        return enumReturnNATIVE(getCPointer(), value);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (int)nativeObject->enumReturn(value);
*/
    private static native int enumReturnNATIVE(long this_addr, int value);

    public boolean printText(int dummyParam, String text) {
        return printTextNATIVE(getCPointer(), dummyParam, text);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return nativeObject->printText(dummyParam, text);
*/
    private static native boolean printTextNATIVE(long this_addr, int dummyParam, String text);

    public void setArray(IDLFloatArray array) {
        setArrayNATIVE(getCPointer(), (array != null ? array.getPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->setArray((float *)array_addr);
*/
    private static native void setArrayNATIVE(long this_addr, long array_addr);

    public void setString(IDLString text) {
        setStringNATIVE(getCPointer(), (text != null ? text.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->setString(*((IDLString* )text_addr));
*/
    private static native void setStringNATIVE(long this_addr, long text_addr);

    public IDLString getString() {
        long pointer = getStringNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (IDLString_TEMP_GEN_0 == null)
            IDLString_TEMP_GEN_0 = new IDLString((byte) 1, (char) 1);
        IDLString_TEMP_GEN_0.setCPointer(pointer);
        return IDLString_TEMP_GEN_0;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)&nativeObject->getString();
*/
    private static native long getStringNATIVE(long this_addr);

    public IDLString getStringValue() {
        long pointer = getStringValueNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (IDLString_TEMP_GEN_1 == null)
            IDLString_TEMP_GEN_1 = new IDLString((byte) 1, (char) 1);
        IDLString_TEMP_GEN_1.setCPointer(pointer);
        return IDLString_TEMP_GEN_1;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
static IDLString copy_addr;
copy_addr = nativeObject->getStringValue();
return (jlong)&copy_addr;*/
    private static native long getStringValueNATIVE(long this_addr);

    public void setVoidParam(long param) {
        setVoidParamNATIVE(getCPointer(), param);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->setVoidParam(( void* )param);
*/
    private static native void setVoidParamNATIVE(long this_addr, long param);

    public long getVoidParam() {
        return getVoidParamNATIVE(getCPointer());
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)nativeObject->getVoidParam();
*/
    private static native long getVoidParamNATIVE(long this_addr);

    public int hiddenInt() {
        return get_hiddenIntNATIVE(getCPointer());
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return nativeObject->hiddenInt;
*/
    private static native int get_hiddenIntNATIVE(long this_addr);

    public void hiddenInt(int hiddenInt) {
        set_hiddenIntNATIVE(getCPointer(), hiddenInt);
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->hiddenInt = hiddenInt;
*/
    private static native void set_hiddenIntNATIVE(long this_addr, int hiddenInt);

    public ReturnClass valueReturnClass() {
        long pointer = get_valueReturnClassNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_3 == null)
            ReturnClass_TEMP_GEN_3 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_3.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_3;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)&nativeObject->valueReturnClass;
*/
    private static native long get_valueReturnClassNATIVE(long this_addr);

    public void valueReturnClass(ReturnClass valueReturnClass) {
        set_valueReturnClassNATIVE(getCPointer(), (valueReturnClass != null ? valueReturnClass.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->valueReturnClass = *((ReturnClass*)valueReturnClass_addr);
*/
    private static native void set_valueReturnClassNATIVE(long this_addr, long valueReturnClass_addr);

    public ReturnClass pointerReturnClass() {
        long pointer = get_pointerReturnClassNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_4 == null)
            ReturnClass_TEMP_GEN_4 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_4.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_4;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)nativeObject->pointerReturnClass;
*/
    private static native long get_pointerReturnClassNATIVE(long this_addr);

    public void pointerReturnClass(ReturnClass pointerReturnClass) {
        set_pointerReturnClassNATIVE(getCPointer(), (pointerReturnClass != null ? pointerReturnClass.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->pointerReturnClass = (ReturnClass*)pointerReturnClass_addr;
*/
    private static native void set_pointerReturnClassNATIVE(long this_addr, long pointerReturnClass_addr);

    public ReturnClass nullPointerReturnClass() {
        long pointer = get_nullPointerReturnClassNATIVE(getCPointer());
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_GEN_5 == null)
            ReturnClass_TEMP_GEN_5 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_GEN_5.setCPointer(pointer);
        return ReturnClass_TEMP_GEN_5;
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
return (jlong)nativeObject->nullPointerReturnClass;
*/
    private static native long get_nullPointerReturnClassNATIVE(long this_addr);

    public void nullPointerReturnClass(ReturnClass nullPointerReturnClass) {
        set_nullPointerReturnClassNATIVE(getCPointer(), (nullPointerReturnClass != null ? nullPointerReturnClass.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass* nativeObject = (NormalClass*)this_addr;
nativeObject->nullPointerReturnClass = (ReturnClass*)nullPointerReturnClass_addr;
*/
    private static native void set_nullPointerReturnClassNATIVE(long this_addr, long nullPointerReturnClass_addr);

    public static int hiddenInt_static() {
        return get_hiddenInt_staticNATIVE();
    }

    /*[-C++;-NATIVE]
return NormalClass::hiddenInt_static;
*/
    private static native int get_hiddenInt_staticNATIVE();

    public static void hiddenInt_static(int hiddenInt_static) {
        set_hiddenInt_staticNATIVE(hiddenInt_static);
    }

    /*[-C++;-NATIVE]
NormalClass::hiddenInt_static = hiddenInt_static;
*/
    private static native void set_hiddenInt_staticNATIVE(int hiddenInt_static);

    public static ReturnClass valueReturnClass_static() {
        long pointer = get_valueReturnClass_staticNATIVE();
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_STATIC_GEN_0 == null)
            ReturnClass_TEMP_STATIC_GEN_0 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_STATIC_GEN_0.setCPointer(pointer);
        return ReturnClass_TEMP_STATIC_GEN_0;
    }

    /*[-C++;-NATIVE]
return (jlong)&NormalClass::valueReturnClass_static;
*/
    private static native long get_valueReturnClass_staticNATIVE();

    public static void valueReturnClass_static(ReturnClass valueReturnClass_static) {
        set_valueReturnClass_staticNATIVE((valueReturnClass_static != null ? valueReturnClass_static.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass::valueReturnClass_static = *((ReturnClass*)valueReturnClass_static_addr);
*/
    private static native void set_valueReturnClass_staticNATIVE(long valueReturnClass_static_addr);

    public static ReturnClass pointerReturnClass_static() {
        long pointer = get_pointerReturnClass_staticNATIVE();
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_STATIC_GEN_1 == null)
            ReturnClass_TEMP_STATIC_GEN_1 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_STATIC_GEN_1.setCPointer(pointer);
        return ReturnClass_TEMP_STATIC_GEN_1;
    }

    /*[-C++;-NATIVE]
return (jlong)NormalClass::pointerReturnClass_static;
*/
    private static native long get_pointerReturnClass_staticNATIVE();

    public static void pointerReturnClass_static(ReturnClass pointerReturnClass_static) {
        set_pointerReturnClass_staticNATIVE((pointerReturnClass_static != null ? pointerReturnClass_static.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass::pointerReturnClass_static = (ReturnClass*)pointerReturnClass_static_addr;
*/
    private static native void set_pointerReturnClass_staticNATIVE(long pointerReturnClass_static_addr);

    public static ReturnClass nullPointerReturnClass_static() {
        long pointer = get_nullPointerReturnClass_staticNATIVE();
        if (pointer == 0)
            return null;
        if (ReturnClass_TEMP_STATIC_GEN_2 == null)
            ReturnClass_TEMP_STATIC_GEN_2 = new ReturnClass((byte) 1, (char) 1);
        ReturnClass_TEMP_STATIC_GEN_2.setCPointer(pointer);
        return ReturnClass_TEMP_STATIC_GEN_2;
    }

    /*[-C++;-NATIVE]
return (jlong)NormalClass::nullPointerReturnClass_static;
*/
    private static native long get_nullPointerReturnClass_staticNATIVE();

    public static void nullPointerReturnClass_static(ReturnClass nullPointerReturnClass_static) {
        set_nullPointerReturnClass_staticNATIVE((nullPointerReturnClass_static != null ? nullPointerReturnClass_static.getCPointer() : 0));
    }

    /*[-C++;-NATIVE]
NormalClass::nullPointerReturnClass_static = (ReturnClass*)nullPointerReturnClass_static_addr;
*/
    private static native void set_nullPointerReturnClass_staticNATIVE(long nullPointerReturnClass_static_addr);
}
