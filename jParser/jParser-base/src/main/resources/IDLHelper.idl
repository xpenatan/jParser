
interface IDLTemp {
    [BindTo="Int_1"] static IDLIntArray Int_1__0(long value);
    [BindTo="Int_2"] static IDLIntArray Int_2__0(long value);
    [BindTo="Int_3"] static IDLIntArray Int_3__0(long value);
    [BindTo="Int_4"] static IDLIntArray Int_4__0(long value);

    [BindTo="Float_1"] static IDLFloatArray Float_1__0(float value);
    [BindTo="Float_2"] static IDLFloatArray Float_2__0(float value);
    [BindTo="Float_3"] static IDLFloatArray Float_3__0(float value);
    [BindTo="Float_4"] static IDLFloatArray Float_4__0(float value);

    [BindTo="Bool_1"] static IDLBoolArray Bool_1__0(boolean value);
    [BindTo="Bool_2"] static IDLBoolArray Bool_2__0(boolean value);
    [BindTo="Bool_3"] static IDLBoolArray Bool_3__0(boolean value);
    [BindTo="Bool_4"] static IDLBoolArray Bool_4__0(boolean value);
};

interface IDLArrayBase {
    void clear();
    long getSize();
    void resize(long size);
    any getPointer();
};

interface IDLString {
    void IDLString();
    void clear();
    void append([Const] DOMString text);
    void append([Const] DOMString text, long size);
    long size();
    byte at(long index);
    [Const] DOMString data();
    [Const] DOMString c_str();
};

interface IDLStringView {
    void IDLStringView([Const] DOMString text);
    void IDLStringView([Const] DOMString text, long size);
    long size();
    byte at(long index);
    [Const] DOMString data();
};

interface IDLBoolArray {
    void IDLBoolArray(long size);
    boolean getValue(long index);
    void setValue(long index, boolean value);
    void copy([Ref] IDLBoolArray src, long srcOffset, long destOffset, long length);
};
IDLBoolArray implements IDLArrayBase;

interface IDLIntArray {
    void IDLIntArray(long size);
    long getValue(long index);
    void setValue(long index, long value);
    void copy([Ref] IDLIntArray src, long srcOffset, long destOffset, long length);
};
IDLIntArray implements IDLArrayBase;

interface IDLLongArray {
    void IDLLongArray(long size);
    long long getValue(long index);
    void setValue(long index, long long value);
    void copy([Ref] IDLLongArray src, long srcOffset, long destOffset, long length);
};
IDLLongArray implements IDLArrayBase;

interface IDLFloatArray {
    void IDLFloatArray(long size);
    float getValue(long index);
    void setValue(long index, float value);
    void copy([Ref] IDLFloatArray src, long srcOffset, long destOffset, long length);
};
IDLDoubleArray implements IDLArrayBase;

interface IDLDoubleArray {
    void IDLDoubleArray(long size);
    double getValue(long index);
    void setValue(long index, double value);
    void copy([Ref] IDLDoubleArray src, long srcOffset, long destOffset, long length);
};
IDLDoubleArray implements IDLArrayBase;

interface IDLByteArray {
    void IDLByteArray(long size);
    byte getValue(long index);
    void setValue(long index, byte value);
    void copy([Ref] IDLByteArray src, long srcOffset, long destOffset, long length);
};
IDLByteArray implements IDLArrayBase;