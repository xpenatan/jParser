apply plugin: "java"
apply plugin: 'java-library'
apply plugin: 'signing'

def module_name = "jParser-cpp"

dependencies {
    implementation project(":jParser:core")
    implementation "com.badlogicgames.gdx:gdx-jnigen:$project.jniGenVersion"

    testImplementation project(":jParser:loader")
    testImplementation "junit:junit:$project.jUnitVersion"
}

task fromClasses(type: Jar) {
    from(sourceSets.main.output) {
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

configurations {
    provided
    implementation.extendsFrom provided
}

publishing {
    publications {
        maven(MavenPublication) {
            version project.jParserVersion + project.jParserType
            project.version = project.jParserVersion + project.jParserType
            artifactId module_name
            artifact fromClasses
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = "jParser cpp"
                description = "Java code parser"
                url = "http://github.com/xpenatan/jParser"
                developers {
                    developer {
                        id = "Xpe"
                        name = "Natan"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/xpenatan/jParser.git"
                    developerConnection = "scm:git:ssh://github.com/xpenatan/jParser.git"
                    url = "http://github.com/xpenatan/jParser/tree/master"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}